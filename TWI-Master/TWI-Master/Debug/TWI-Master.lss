
TWI-Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000606  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036e  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000af  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <i2c_write>:
	while((TWCR&(1<<TWINT))==0);
}
/*---------------------------------------------------------------------------------------------*/
void i2c_stop()
{
	TWCR |= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  6c:	83 b9       	out	0x03, r24	; 3
  6e:	86 b7       	in	r24, 0x36	; 54
  70:	84 68       	ori	r24, 0x84	; 132
  72:	86 bf       	out	0x36, r24	; 54
  74:	06 b6       	in	r0, 0x36	; 54
  76:	07 fe       	sbrs	r0, 7
  78:	fd cf       	rjmp	.-6      	; 0x74 <i2c_write+0x8>
  7a:	08 95       	ret

0000007c <i2c_start>:
  7c:	86 b7       	in	r24, 0x36	; 54
  7e:	84 6a       	ori	r24, 0xA4	; 164
  80:	86 bf       	out	0x36, r24	; 54
  82:	06 b6       	in	r0, 0x36	; 54
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <i2c_start+0x6>
  88:	08 95       	ret

0000008a <i2c_init>:
}
/*---------------------------------------------------------------------------------------------*/
void i2c_init()
{
	TWSR = 0x00;
  8a:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x00;
  8c:	10 b8       	out	0x00, r1	; 0
	TWCR = (1<<TWEN)|(1<<TWEA);
  8e:	84 e4       	ldi	r24, 0x44	; 68
  90:	86 bf       	out	0x36, r24	; 54
  92:	08 95       	ret

00000094 <main>:
#include <util/delay.h>
#include "TWI-Mstr-Cond.h"

int main(void)
{
	DDRA = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26
	i2c_init();
  98:	0e 94 45 00 	call	0x8a	; 0x8a <i2c_init>
	i2c_start();
  9c:	0e 94 3e 00 	call	0x7c	; 0x7c <i2c_start>
	i2c_write(0x40);
  a0:	80 e4       	ldi	r24, 0x40	; 64
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_write>
	while (1)
	{
		i2c_write(0x55);
  a6:	85 e5       	ldi	r24, 0x55	; 85
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e3       	ldi	r18, 0x3F	; 63
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x1e>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x28>
  bc:	00 00       	nop
		_delay_ms(1000);
		i2c_write(0xAA);
  be:	8a ea       	ldi	r24, 0xAA	; 170
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <i2c_write>
  c4:	2f e3       	ldi	r18, 0x3F	; 63
  c6:	8d e0       	ldi	r24, 0x0D	; 13
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x36>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x40>
  d4:	00 00       	nop
  d6:	e7 cf       	rjmp	.-50     	; 0xa6 <main+0x12>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
